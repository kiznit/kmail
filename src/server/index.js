/* eslint import/no-extraneous-dependencies: 1 */

import express from 'express';
import http from 'http';

const app = express();


// We build a list of promises that need to be resolved before we can start serving.
const startupPromises = [];


// Here we implement hot module reloading (HMR) for the client bundles.
// We create an express app for the Webpack middlewares and use the real app
// as an express middleware. This allows us to hot reload the real app without
// interfering with bundle serving and client-side hot module reloading.
if (__DEV__) {
    const webpack = require('webpack');
    const config = require('../../webpack.client.babel').default();
    config.mode = 'development';
    const compiler = webpack(config);

    startupPromises.push(new Promise((resolve, reject) => {
        compiler.plugin('done', stats => {
            if (stats.hasErrors()) {
                reject(new Error('Compilation of client code failed.'));
            } else {
                resolve();
            }
        });
    }));

    // Client bundles
    const WebpackDevMiddleware = require('webpack-dev-middleware');
    app.use(WebpackDevMiddleware(compiler, {
        publicPath: config.output.publicPath,
        mode: 'development',
    }));

    // Client hot module reloading
    const WebpackHotMiddleware = require('webpack-hot-middleware');
    app.use(WebpackHotMiddleware(compiler));
}


const server = http.createServer(app);
const port = process.env.PORT || 3000;


Promise.all(startupPromises)
    .then(() => {
        // The application needs to be imported *after* the client bundle is generated.
        // This is because we want to include 'assets.json' inside renders.jsx and that
        // file is generated by the client-side webpack configuration.
        const realApp = require('./app').default;

        app.use((req, res) => {
            realApp.handle(req, res);
        });

        server.listen(port, () => {
            const addr = server.address();
            if (server.address && server.port) {
                console.log(`Server listening at http://${addr.address}:${addr.port}`);
            } else {
                console.log(`Server listening at http://localhost:${port}`);
            }
        });
    })
    .catch(error => {
        console.error(error);
        process.exit(1);
    });
